<?php


define(TYPE, 'metadata_node');
define(DATA_FOLDER, 'metadata_records');
define(METADATA_FORM_NAME, 'Metadata_Editor');
define(NUMBER_OF_RECORDS_BLOCK, 'metadata_node_block_num');


////////////////////////////// NODE CREATION AND CONTENT_TYPE, METADAT FORM, FILE SAVE /////////
/**
* Implementation of hook_node_info().
*/
function metadata_node_node_info() {
  return array(
    TYPE => array(
      'name' => t('Metadata Record'),
      'module' => 'metadata_node',
      'description' => "Create medata data record using a form created by XML Form Builder.",
    )
  );
}

/**
 * Implementation of hook_view() 
 * 
 */

function metadata_node_view($node, $teaser = FALSE, $page = FALSE) {
    drupal_set_message('body=' . $node->body);
    $file_path = $node->body;
    $dom = new DOMDocument();
    //todo guard against invalid file or null
    $xml='';
    if($dom->load($file_path)) {
         $xml=$dom->saveXML();
    }
    
    $content = htmlentities($xml);
    $content = append_to_new_line($content, '<br/>');
    $content = "<code class='prettyprint xml' style='overflow: scroll; position: relative;'>$content</code>";

    $node = node_prepare($node, $teaser);
    $node->content['body']['#value']=$content;
    return $node;
}

/**
* Implementation of hook_perm().
*/
function metadata_node_perm() {
  return array('create metadata_node', 'edit own metadata_node', 'view metadata_node');
}

/**
* Implementation of hook_access().
*/
function metadata_node_access($op, $node) {
  global $user;

  if ($op == 'create') {
    // Only users with permission to do so may create this node type.
    return user_access('create metadata_node');
  }

  // Users who create a node may edit or delete it later, assuming they have the
  // necessary permissions.
  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own metadata_node') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
* Implementation of hook_form().
*/
function metadata_node_form(&$node, $form_state) {
    //note: even just return empty array, this funct is needed 
    //in order for form_alter to work
    return array();
}



/**
 * implement hook_form_alter
 * remove some of the default node entries 
 */
function metadata_node_form_alter(&$form, &$form_state, $form_id) {
    drupal_set_message("Form id: $form_id");
    switch ($form_id) {
        case 'metadata_node_node_form':
            unset($form['author']);
            unset($form['menu']);
            unset($form['options']);
            unset($form['comment_settings']);
            unset($form['buttons']);

            $nid=$form['nid']['#value'];
            $vid=$form['vid']['#value'];
            $uid=$form['uid']['#value'];
            $xml_file_path=null;
            if($nid>0) {
                $xml_file_path=$form['#node']->body;
            }
            $my_form=get_predefined_form($form_state, METADATA_FORM_NAME, $nid, $xml_file_path);
            $my_form['submit']['#submit'][]='metadata_node_form_submit';
            $my_form['submit']['#weight']=200;//higher the number lower the position
            //unset($my_form['submit']);
            $form=array_merge($my_form, $form);
            //$form['buttons']['submit']['#submit'][] = 'metadata_node_form_submit';
            break;
    }
}

/**
 * handler for submit button
 */
function metadata_node_form_submit(array $form, array &$form_state) {
  module_load_include('inc', 'xml_form_api', 'XMLForm');
  try {
    $xml_form = new XMLForm($form_state);
    $doc = $xml_form->submit($form, $form_state);
    $document = $doc->document;
    $title = get_docTitle($document);
    $node = $form['#node'];
    $nid = $node->nid;
    $file_created = create_update_file($title, $document, $node); 
    if(!isset ($nid)) {
        if(isset ($file_created)) {
            create_node($title, $file_created);
            drupal_set_message('Metadata record saved successfully. Record title: ' . $title);
        }
        else {
            drupal_set_message('Not not created because file save failed.');
        }
    }
    elseif ($nid>0) {
        node_save($node); //just to get a new timestamp
        drupal_set_message('Metadata record saved successfully. Record title: ' . $title);
    }
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    //$form_state['rebuild'] = true;
  }
}

/**
 * create or update a file and return the file name
 * the content is the XML as string contained in $document
 * @param type $document 
 */
function create_update_file($title, DOMDocument $document, $node) {
   if(isset ($node)) {
        $nid = $node->nid;
        $vid = $node->vid;
        if($nid>0) { //should be true if $node exists
            return update_file($title, $document, $node);
        }    
   }
   return create_file($title, $document);
}

function update_file($title, DOMDocument $document, &$node) {
    global $user;
    $file_name=null;
    $published=$node->status;
    try {
        $file_name=$node->body;
        if(!file_exists($file_name)) {
            drupal_set_message('Metadata record file ' . $file_name .' does not exist on server. Please contact administrator.');
            return '';
        }
        $xml_string = $document -> saveXML();
        if($published) {
            file_save_data($xml_string, $file_name, FILE_EXISTS_RENAME);
        }
        else {
            file_save_data($xml_string, $file_name, FILE_EXISTS_REPLACE);
        }
        //@TODO
        //if title changed, update the node title, move file to new name, update node body, do not save here, the caller is to save
        //
        
    }catch (Exception $e) {
        drupal.setMessage('error:' . $e->getMessage());
    }
    return $file_name;    
}

function create_file($title, DOMDocument $document) {
    global $user;
    $file_name=null;
    try {
        $file_name = htmlentities($title);
        trim($file_name);
        $file_path = file_directory_path();
        $folder = $file_path . '/' . DATA_FOLDER;
        if(!file_exists($folder)) {
            drupal_set_message('Directory ' . $folder .' does not exist. Contact administrator.');
            exit();
        }
        $user_file_dir = $folder . '/' . $user->name;
        if(!file_exists($user_file_dir)) {
            //create it
            mkdir($user_file_dir, 0777);
        }
        $file_name =  $user_file_dir. '/' . $file_name . '.xml';
        $needles   = array("\r\n", "\n", "\r", '\t', ' ');
        $replace = '_';
        $file_name = str_replace($needles, $replace, $file_name);
        $xml_string = $document -> saveXML();
        file_save_data($xml_string, $file_name, FILE_EXISTS_REPLACE);
    }catch (Exception $e) {
        drupal.setMessage('error:' . $e->getMessage());
    }
    return $file_name;
}

function get_docTitle(DOMDocument $document) {
    $domNodeList =  $document->getElementsByTagName('title');
    $domNode = $domNodeList ->item(0);
    return $domNode->textContent;
}

function create_node($title, $file_name) {
  global $user;
  //  Create new node @TODO use stdClass
  $node = array();
  $node['name'] = $user->name;
  $node['type'] = TYPE;
  //  FORMATS ON CCK NODES APPLY TO FIELDS, SO NO FORMAT SET HERE 
  $node['format'] = 0;
  //  DISABLE READ/WRITE COMMENTS 
  $node['comment'] = 0;
  //  UNPUBLISHED
  $node['status'] = 0;
  //  NOT PROMOTED TO FRONT PAGE 
  $node['promote'] = 0;
  //  NOT STICKY 
  $node['sticky'] = 0;
  //  NODE FIELDS HERE
  $node['title'] = $title;
  $node['body'] = $file_name;
  $node = node_submit($node);
  node_save($node);
}

/**
* Implementation of hook_help().
*/
function metadata_node_help($path, $arg) {
  switch ($path) {
    case 'admin/help#metadata_node':
      return '<p>' . t('ADMIN-HELP-TEXT') . '</p>';
      break;
  }
} 

//helper function to connect to xml form builder
function get_predefined_form(array &$form_state, $form_name, $nid, $xml_file_name) {
  module_load_include('inc', 'xml_form_builder', 'FormBuilder');
  if (!FormBuilder::FormExists($form_name) || !FormBuilder::HasFormDefinition($form_name)) {
    drupal_set_message(t("Form '$form_name' does not exist, or it does not have a complete definition."));
    drupal_not_found();
    exit();
  }
  $xml=NULL;
  if($nid>0) { //in editing mode for a pre-exising node
      if($xml_file_name==NULL) {
          drupal_set_message('the metadata node is corruped, its body is missing file path. Treat as new node.');
      }
      else {
         try { 
//         $handle = fopen($xml_file_name, "r");
//         $xml = fread($handle, filesize($xml_file_name));
//         fclose($handle);
         
         $dom = new DOMDocument();
         if($dom->load($xml_file_name)) {
             $xml=$dom->saveXML();
         }
         
         } catch (Exception $e) {
             drupal_set_message('Could not open file to read: ' . $e->getMessage());
         }
      }
  }
  if($xml==NULL) {
      try {
      //load a template instance so the record will validate against the schema, 
      //but a user  must manually check for correctness
      $path = drupal_get_path('module', 'metadata_node');
      $template_fgdc = file_get_contents($path . '/' . 'reference-fgdc-record.xml');
      $xml=$template_fgdc;        
      } catch (Exception $e) {
          Drupal_set_message('Could not load metadata instance template: '. $e.getMessage() . ' check installation of metadata_node module.');
      }
  }
  try {
    module_load_include('inc', 'xml_form_api', 'XMLForm');
    $xml_form = new XMLForm($form_state);
    if (!$xml_form->isInitialized()) { // Was initialized from storage.
      module_load_include('inc', 'xml_form_api', 'XMLFormDefinition');
      module_load_include('inc', 'xml_form_api', 'XMLDocument');
      $xml_definition = FormBuilder::GetFormDefinition($form_name);
      $form = XMLFormDefinition::GetDrupalForm($xml_definition);
      $properties = XMLFormDefinition::GetFormProperties($xml_definition);
      $properties = $properties['document'];
      $root_name = $properties['root_name']; // @todo change to name.
      $namespaces = new Namespaces($properties['namespaces'], $properties['default_uri']);
      $schema_uri = $properties['schema_uri'];
      $document = new XMLDocument($root_name, $namespaces, $schema_uri, $xml);
//$document = new XMLDocument($properties['root'], $properties['namespaces'], $properties['schema'], $xml);
      $xml_form->initialize($form, $document);
    }
    $output = $xml_form->toArray($form_state);
  } catch (Exception $e) {
    $msg = "File: {$e->getFile()}<br/>Line: {$e->getLine()}<br/>Error: {$e->getMessage()}";
    drupal_set_message($msg, 'error');
    return array();
  }
  return $output;

}

/////////////////////// BLOCK DEFINITION: LIST EXISTING RECORDS AND EDITING FUNCITONS //////////


/**
 * implementating hook_block()
 */
function metadata_node_block($op='list', $delta=0, $edit=array()) {
    global $base_url;
    global $user;
    $header = array(
      array(
        'data' => t('Name'),
        
      ),
      array(
        'data' => t('Download'),
      ),
      array('data' => t('Edit')),
    );
    switch ($op) {
        case 'list' :
            $blocks[0]['info']=t('My Metadata Records');
            $blocks[0]['cache']=BLOCK_NO_CACHE;
            $blocks[1]['info']=t('All Metadata Records');
            $blocks[1]['cache']=BLOCK_NO_CACHE;
            
            return $blocks;
        
        case 'configure':
            $form['num_records'] = array(
                '#type' => 'textfield',
                '#title'=> t('Number of metadata records to display'),
                '#default_value' => variable_get(NUMBER_OF_RECORDS_BLOCK, 20),
            );
            return $form;
       case 'view' :
           $num_of_records = variable_get(NUMBER_OF_RECORDS_BLOCK, 20);
           if($delta == 1 && user_access('view metadata_node')) {
               //query the db
               $result = db_query_range("SELECT nr.title,nr.nid,nr.body, n.status from {node_revisions} nr, {node} n WHERE n.type='%s' AND n.nid=nr.nid ORDER BY nr.timestamp", 
                      TYPE, 
                      0, $num_of_records);
               $destination = drupal_get_destination();
               $items = array();
               
               while ($node = db_fetch_object($result)) {
                   $file_path_name = $node->body;
				   $nid=$node->nid;
                   $edit_url = $base_url . '/' . 'node/' . $nid; //@TODO http://localhost/esdora/node/60/edit?destination=admin%2Fcontent%2Fnode
                   $edit_url = $edit_url . '/edit?destination=admin%2Fcontent%2Fnode';
                   $pos = strrpos($file_path_name, '/');
                   $file_name = substr($file_path_name, $pos+1);
                   //$items[] =$file_name . l('download', $base_url . '/' . $node->body) .
                          //  l(' edit', $edit_url);
                   $items[] = array(
                       array('data' => $file_name),
		       array('data' => l('download', $base_url . '/' . $node->body)),
                       array('data' => l(' edit', $edit_url)),
                   );
               }
               //$block['subject'] = t('Metadata Records');
               $block['content'] = theme('table',$header, $items);
           }
           elseif ($delta==0 && user_access('edit own metadata_node')) {
               //query the db
               $result = db_query_range(
                      "SELECT DISTINCT nr.nid, nr.title, nr.body, n.status from {node_revisions} nr, {node} n WHERE n.uid=%d AND n.type='%s' AND n.nid=nr.nid ORDER BY nr.timestamp",
                      $user->uid,
                      TYPE, 
                      0, 
                      $num_of_records);
               $destination = drupal_get_destination();
               $items = array();
               
               while ($node = db_fetch_object($result)) {
                   $title=$node->title;
                   $nid=$node->nid;
				   print_r($nid.'hello');
				   if(!empty ($title)) {
                   $file_path_name = $node->body;
                   $edit_url = $base_url . '/' . 'node/' . $nid; //@TODO http://localhost/esdora/node/60/edit?destination=admin%2Fcontent%2Fnode
                   $edit_url.='/edit?destination=admin%2Fcontent%2Fnode';
                   $pos = strrpos($file_path_name, '/');
                   $file_name = substr($file_path_name, $pos+1);
                  // $items[] =$title . ': ' . l('download', $base_url . '/' . $file_path_name) . ': ' .
                    //        l(' edit', $edit_url);
                     $items[] = array(
                         array('data' => $file_name,),
                         array('data' => l('download', $base_url . '/' . $node->body),),
                         array('data' => l(' edit', $edit_url)) );
                   }
               }
               //$block['subject'] = t('Metadata Records');
               $block['content'] = theme('table', $items);               
           }
           return $block;
    }
}

?>
