<?php

module_load_include('inc', 'islandora_solr_search', 'islandora_solr_search.admin');
module_load_include('inc', 'islandora_solr_search', 'includes/common');
module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrQueryProcessor');

//$islandora_query;
$queryClass;

/**
 * @file
 * Implementation of Solr search for the Islandora fedora_search module.
 */

/**
 * Implementation of hook_menu().
 */
function islandora_solr_search_menu() {
  $items['islandora/solr/search'] = array(
    'page callback' => 'islandora_solr_search',
    'access arguments' => array('view fedora collection'), //depends of fedora_repository view
    'type' => MENU_CALLBACK,
  );


  $items['islandora/solr/process'] = array(
    'page callback' => 'update_solr_url_div',
    'access arguments' => array('view fedora collection'),
    'file' => 'islandora_solr_search.admin.inc',
    'type' => MENU_CALLBACK,
  );

  $items['admin/settings/islandora_solr_search'] = array(
    'title' => 'Islandora Solr Client',
    'description' => 'Managing Islandora Solr Searching',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('islandora_solr_admin_settings'),
    'access arguments' => array('administer site configuration'),
    'file' => 'islandora_solr_search.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );



  return $items;
}

/**
 * Implementation of hook_block().
 */
function islandora_solr_search_block($op = 'list', $delta = 0, $edit = array()) {
  global $queryClass;
  islandora_solr_search_init();

  /*
   * Here I need to call a hook which will return module/file/class/method/name/description
   * for blocks which need a queryClass to render.
   */
  $solr_blocks = module_invoke_all("islandora_solr_query_blocks");

  // The $op parameter determines what piece of information is being requested.
  switch ($op) {
    case 'list':
      // If $op is "list", we just need to return a list of block descriptions.
      // This is used to provide a list of possible blocks to the administrator,
      // end users will not see these descriptions.

      foreach ($solr_blocks as $name => $block) {
        $blocks[$name] = array(
          'info' => t($block['name']),
        );
      }

      return $blocks;
    case 'configure':
      // If $op is "configure", we need to provide the administrator with a
      // configuration form. The $delta parameter tells us which block is being
      // configured. In this example, we'll allow the administrator to customize
      // the text of the first block.
      $form = array();

      return $form;
    case 'save':
    // If $op is "save", we need to save settings from the configuration form.
    // Since the first block is the only one that allows configuration, we
    // need to check $delta to make sure we only save it.

    case 'view': default:
      // If $op is "view", then we need to generate the block for display
      // purposes. The $delta parameter tells us which block is being requested.
      if (!empty($solr_blocks[$delta])) {

        // First we'll set the block title.
        $block['subject'] = t($solr_blocks[$delta]['name']);

        // Include the file from which the block originates.
        require_once( drupal_get_path('module', $solr_blocks[$delta]['module']) . '/' . $solr_blocks[$delta]['file'] );

        // If a class is present, instantiate it and proceed from there.
        // The variable $queryClass (the IslandoraSolrQueryProcessor, containing
        // the Solr search result), is fed as an argument.
        if (!empty($solr_blocks[$delta]['class'])) {
          $displayClass = new IslandoraSolrResults();
          $block_function = $solr_blocks[$delta]['function'];
          if (method_exists($displayClass, $block_function)) {
            $block['content'] = $displayClass->$block_function($queryClass);
          }

          // Otherwise, simply load the form.
        }
        elseif (!empty($solr_blocks[$delta]['form'])) {
          $block['content'] = drupal_get_form($solr_blocks[$delta]['form']);
        }
      }

      return $block;
  }
}

/**
 * Implementation of hook_theme().
 */
function islandora_solr_search_theme() {
  return array(
    'islandora_solr_search_block_form' => array(
      'arguments' => array(
        'form' => NULL,
      ),
    ),
  );
}

/**
 * Implements hook_islandora_solr_primary_display()
 */
function islandora_solr_search_islandora_solr_primary_display() {
  return array(
    // 'machine-name' = array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'function_name',
    //   'description' => 'A description of the display profile',
    // );
    //
    // Note: this class should either be, or extend, the class IslandoraSolrResults.
    //
    'default' => array(
      'name' => t('Fields (default)'),
      'module' => 'islandora_solr_search',
      'file' => 'IslandoraSolrResults.inc',
      'class' => "IslandoraSolrResults",
      'function' => "displayResults",
      'description' => t("A simple output."),
    ),
  );
}

/**
 * Implements hook_islandora_solr_query_blocks()
 */
function islandora_solr_search_islandora_solr_query_blocks() {
  return array(
    // 'macine_name' => array(
    //   'name' => 'Human Readable Name',
    //   'module' => 'module_name',
    //   'file' => 'FileName.inc',
    //   'class' => 'ClassName',
    //   'function' => 'method_name',
    //   'form' => 'form_function_name',
    // ),
    //
    // Note: As in the examples below, it is valid to specify
    // *either* a class and method *or* a form.  The latter implies no
    // class needs to be instantiated.
    //

    'advanced' => array(
      'name' => 'Islandora Solr Advanced Search',
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => null,
      'function' => null,
      'form' => 'islandora_solr_search_block_form',
    ),
    'simple' => array(
      'name' => 'Islandora Solr Simple Search',
      'module' => 'islandora_solr_search',
      'file' => 'islandora_solr_search.module',
      'class' => null,
      'function' => null,
      'form' => 'islandora_solr_simple_search_form',
    ),
    'basic_facets' => array(
      'name' => 'Islandora Facet Block',
      'module' => 'islandora_solr_search',
      'file' => 'IslandoraSolrResults.inc',
      'class' => 'IslandoraSolrResults',
      'function' => 'displayFacets',
      'form' => null,
    ),
    'current_query' => array(
      'name' => 'Islandora Current Query',
      'module' => 'islandora_solr_search',
      'file' => 'IslandoraSolrResults.inc',
      'class' => 'IslandoraSolrResults',
      'function' => 'currentQuery',
      'form' => null,
    ),
  );
}

function islandora_solr_simple_search_form() {
  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
  $resultsClass = new IslandoraSolrResults();
  return $resultsClass->build_simple_solr_form();
}

function islandora_solr_search_block_form_validate($form, &$form_state) {

  $repeat = variable_get('islandora_solr_search_block_repeat', '3');
  $found = FALSE;
  for ($fieldNum = 1; $fieldNum <= $repeat; $fieldNum++) {
    if (isset($form_state['values']["fedora_terms$fieldNum"])) {
      $found = TRUE;
    }
  }
  if (!$found) {
    form_set_error('edit_fedora_terms1', t('Please enter search term.'));
  }
}

function islandora_solr_simple_search_form_submit($form, &$form_state) {
  $searchString = $form_state['values']['islandora_simple_search_query'];
  $searchString = htmlspecialchars(drupal_urlencode($searchString), ENT_QUOTES, 'utf-8', false);
  $searchString = str_replace('/', '~slsh~', $searchString); //replace the slash so url doesn't break
  drupal_goto("islandora/solr/search/$searchString/-/dismax");
}

function islandora_solr_search_block_form() {
  global $queryClass;
  islandora_solr_search_init();

  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
  $resultsClass = new IslandoraSolrResults();
  return $resultsClass->build_solr_search_form(null, null, $queryClass->solrQuery);
}

function theme_islandora_solr_search_block_form($form) {
  global $queryClass;
  islandora_solr_search_init();

  module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
  $resultsClass = new IslandoraSolrResults();
  return $resultsClass->theme_solr_search_form($form);
}

function islandora_solr_search($query, $fq=null, $dismax=null) {
  global $queryClass;
  islandora_solr_search_init();
  // Build and execute Apache Solr query
  $queryResult = $queryClass->buildAndExecuteQuery($query, $fq, $dismax);
 
  // Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
  $islandora_solr_selected_display = isset($_GET['solr_profile']) ? $_GET['solr_profile'] : null;
  $primary_profiles = module_invoke_all("islandora_solr_primary_display");
  $secondary_profiles = module_invoke_all("islandora_solr_secondary_display");

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($secondary_profiles[$islandora_solr_selected_display])) {
    $profile = $secondary_profiles[$islandora_solr_selected_display];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message("There is an error in the solr search configuration: the display profile is not found.", 'error');
    $profile = $primary_profiles['default'];
  }

  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Set display class and function vars
  $solrClass = $profile['class'];
  $solrFunction = $profile['function'];

  $nope = false;

  if (class_exists($solrClass)) {
    $implementation = new $solrClass();
  }
  else {
    $nope = true;
  }

  if (!$nope && method_exists($implementation, $solrFunction)) {
    $output = $implementation->$solrFunction($queryClass);
  }
  else {
    $nope = true;
  }

  if ($nope) {
    module_load_include('inc', 'islandora_solr_search', 'IslandoraSolrResults');
    $resultsClass = new IslandoraSolrResults();
    $output = $resultsClass->displayResults($queryClass);
  }

      if (variable_get('islandora_solr_search_debug_mode', 0)) { // debug dump
    drupal_set_message('Params: <br/><pre>' . print_r($queryClass->solrParams, true) . '</pre>', 'status');
  }

  return $output;


//  return $queryResult;
}

function islandora_solr_search_block_form_submit($form, &$form_state) {
  global $queryClass;
  islandora_solr_search_init();

  $type_id = trim($form_state['values']['type']);
  $repeat = variable_get('islandora_solr_search_block_repeat', '3');
  $fedora_terms = array();
  $types = array();
  $booleans = array();

  for ($fieldNum = 1; $fieldNum <= $repeat; $fieldNum++) {
    if ($form_state['values']["fedora_terms$fieldNum"]) {
      $types[] = trim($form_state['values']["type$fieldNum"]);
      $fedora_terms[] = lesser_escape(trim($form_state['values']["fedora_terms$fieldNum"]));
    }
    $next = $fieldNum + 1;
    if ($form_state['values']["fedora_terms$next"] && $form_state['values']["fedora_terms$fieldNum"]) {
      $booleans[] = trim($form_state['values']["andor$fieldNum"]);
    }
  }

  for ($iteration = 0; $iteration < count($fedora_terms); $iteration++) {
    $searchString .= $types[$iteration] . ":" . $fedora_terms[$iteration] . " " . $booleans[$iteration] . " ";
  }
  $searchString = trim($searchString);
  $searchString = htmlspecialchars(drupal_urlencode($searchString), ENT_QUOTES, 'utf-8', false);
  $searchString = str_replace('/', '~slsh~', $searchString); //replace the slash so url doesn't break
  drupal_goto("islandora/solr/search/$searchString/-");
}

/**
 * Implementation of hook_help().
 */
function islandora_solr_search_help($path, $arg) {
  switch ($path) {
    case 'admin/help#islandora_solr_search':
      return t(
          '<p>
         The Islandora Solr Search extends the functionality of the Fedora_Repository module.
         This module allows one or more of a series of blocks to be configured to search a solr index.
         This module can co-exist with the original Fedora_Repositories search block, but Solr\'s
         additional functionality will normally make the original block redundant.
         </p>
         <p>
         The !guide contains additonal information.
         </p>
         <ul>
           <li>Islandora Solr Search requires a working Solr instance. The !sWiki has full setup instructions</li>
           <li>Once Solr is running and tested, configure <b>Gsearch</b> to update Solr. Consult the !GSearch for details.</li>
           <li>Retreive the !client, unzip it, and copy the <b>Solr</b> directory from the archive to the islandora_solr_search module\'s folder.</li>
           <li>Go to Administer &gt; Site Configuration &gt; Islandora Solr Client <em>(or click the link below)</em> to configure the module. Set which Solr request handler to use, set the port, host and context for the index to be queried, and select which fields are to be used for filtering. Solr\'s <b>schema.xml</b> and  <b>solrconfig.xml</b> must be configured for the request handler as well as which  fields to index and return.</li>
           <li>The module allows custom code to be used to display search results.&nbsp; If custom PHP code is used, the paths to that codes\'s file and function must be entered here as well.</li>
           <li>Three different blocks are now available under Administer &gt; Site Building &gt; Blocks:&nbsp; Islandora Solr Simple Search Block, Islandora Solr Facet Block, and Islandora Solr Search Block.&nbsp; The configuration setting for each of these blocks will allow you to control their position on the screen, and on which pages they will be displayed.</li>
           <li>The Islandora Solr Simple Search Block will use will add  defType=dismax to the configured request handler. The request handler tag in <b>solrconfig.xml</b> must have an attribute of <b>default="true"</b>.</li>
         </ul>
        ', array(
        '!guide' => l('Islandora Guide', 'https://wiki.duraspace.org/display/ISLANDORA/Islandora+Guide'),
        '!sWiki' => l("Solr Wiki", 'http://wiki.apache.org/solr/SolrTomcat'),
        '!GSearch' => l('GSearch Documentation', 'https://wiki.duraspace.org/display/FCSVCS/Generic+Search+Service+2.2'),
        '!client' => l('Apache Solr php client', 'http://code.google.com/p/solr-php-client'),
          )
      );
  }
}

function islandora_solr_search_init() {
  static $islandora_solr_search_init = false;
  if (!$islandora_solr_search_init) {
    drupal_add_css(drupal_get_path('module', 'islandora_solr_search') . '/islandora_solr_search.css');
    global $queryClass;
    if (empty($queryClass)) {
      $queryClass = new IslandoraSolrQueryProcessor();
    }
    $islandora_solr_search_init = true;
  }
}
