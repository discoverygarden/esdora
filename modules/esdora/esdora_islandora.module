<?php

/**
 * @file
 *
 */
define('ESDORA_COLLECTION_PID', 'esdora:defaultCollectionCModel');
define('ESDORA_COMPUND_DATA_PID', 'esdora:defaultDataCModel');
define('ESDORA_ATOMISTIC_DATA_PID', 'esdora:atomicDataCModel');
define('MENU_ESDORA_GET_TAB', 'esdora/tab');
define('THEME_ESDORA_ISLANDORA_OBJECT', 'esdora_islandora_object');
define('THEME_ESDORA_ISLANDORA_OBJECT_TABS', 'esdora_islandora_object_tabs');
define('THEME_ESDORA_ISLANDORA_OBJECT_TAB_MANAGE', 'esdora_islandora_object_manage_tab');
define('THEME_ESDORA_ISLANDORA_COLLECTION', 'esdora_islandora_collection');
define('THEME_ESDORA_DERIVATIVE_FORM_TABLE', 'esdora_derivative_form_table');

/**
 * Implements hook_menu().
 */
function esdora_islandora_menu() {
  module_load_include('inc', 'fedora_repository', 'ObjectHelper');
  return array(
    MENU_ESDORA_GET_TAB => array(
      'access callback' => 'user_access',
      'access arguments' => array(OBJECTHELPER::$OBJECT_HELPER_VIEW_FEDORA),
      'page callback' => 'esdora_get_tabs',
      'file' => 'esdora.tabs.inc',
      'type' => MENU_CALLBACK,
    ),
    'ajax/gettabs/compound' => array(
      'access callback' => 'user_access',
      'access arguments' => array(OBJECTHELPER::$OBJECT_HELPER_VIEW_FEDORA),
      'page callback' => 'esdora_islandora_get_tabs_compound',
      'type' => MENU_CALLBACK,
    ),
    'ajax/gettabs/atomic' => array(
      'access callback' => 'user_access',
      'access arguments' => array(OBJECTHELPER::$OBJECT_HELPER_VIEW_FEDORA),
      'page callback' => 'esdora_islandora_get_tabs_atomic',
      'type' => MENU_CALLBACK,
    ),
    'esdora/render/form' => array(
      'access callback' => 'user_access',
      'access arguments' => array(OBJECTHELPER::$EDIT_FEDORA_METADATA),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('esdora_islandora_edit_form'),
      'type' => MENU_CALLBACK,
    ),
    'esdora/addtoworkflow' => array(
      'access callback' => 'user_access',
      'access arguments' => array(OBJECTHELPER::$EDIT_FEDORA_METADATA),
      'page callback' => 'esdora_islandora_add_to_workflow',
      'type' => MENU_CALLBACK,
    ),
  );
}

/**
 * Implements hook_menu_alter().
 *
 * Alter's purge datastream callback to remove any rels-int statments about the datastream. Calls the original callback afterwards.
 * we will then call the fedora_repository_purge_stream function from ours
 *
 * Alters the main fedora_repository display page to render esdora custom collection/object views.
 */
function esdora_islandora_menu_alter(array &$items) {
  // @todo check out the comments in the purgeStream Menu Callback
  $items['fedora/repository/purgeStream']['page callback'] = 'esdora_islandora_prepare_stream_for_removal';
  $items['fedora/repository/purgeStream']['module'] = 'esdora_islandora';
  $items['fedora/repository']['page callback'] = 'esdora_repository_page';
}

/**
 * Implements hook_theme().
 */
function esdora_islandora_theme() {
  return array(
    THEME_ESDORA_ISLANDORA_OBJECT => array(
      'arguments' => array('pid' => NULL, 'page_number' => NULL),
      'file' => 'EsdoraDisplay.inc'
    ),
    THEME_ESDORA_ISLANDORA_OBJECT_TABS => array(
      'arguments' => array('pid' => NULL, 'page_number' => NULL),
      'file' => 'EsdoraDisplay.inc'
    ),
    THEME_ESDORA_ISLANDORA_OBJECT_TAB_MANAGE => array(
      'arguments' => array('pid' => NULL),
      'template' => 'templates/ManageTab',
      'file' => 'EsdoraDisplay.inc'
    ),
    THEME_ESDORA_ISLANDORA_COLLECTION => array(
      'arguments' => array('pid' => NULL, 'page_number' => NULL),
      'file' => 'EsdoraDisplay.inc'
    ),
    THEME_ESDORA_DERIVATIVE_FORM_TABLE => array(
      'arguments' => array('element' => NULL),
      'file' => 'esdora_forms.inc'
    )
  );
}

/**
 * Implements hook_help().
 */
function esdora_islandora_help($path, $arg) {
  switch ($path) {
    case 'admin/modules#description' :
      return t('Grabs a list of items from a collection in Drupal that are presented on the home page.');
    case 'node/add#fedora_repository' :
      return t('Use this page to grab a list of items from a Fedora collection.');
  }
}

/**
 * Menu callback for esdora/addtoworkflow.
 *
 * @param string $pid
 *   Object to add to the workflow.
 */
function esdora_islandora_add_to_workflow ($pid) {
  module_load_include('inc','islandora_workflow','islandora_workflow');
  $result = islandora_workflow_init_workflow($pid);
  $message = $result ? t('Successfully added object to workflow') : t('Could not add object @pid to workflow', array('@pid' => $pid));
  drupal_set_message($message);
  return t('Attempted to update object');
}

/**
 * Menu callback for esdora/render/form. Returns a form using the xml_form_builder.
 *
 * @param string $pid
 *   PID of the object.
 * @param string $dsid
 *   The metadata datastream to edit.
 * @param string $form_name
 *   The name of the xml form.
 *
 * @return array
 *   An edit metadata Drupal form.
 */
function esdora_islandora_render_form($pid, $dsid, $form_name) {

}

/**
 * Fetches the xml edit datastream form.
 *
 * @param array $form_state
 *   The Drupal form state.
 * @param string $pid
 *   PID of the object.
 * @param string $dsid
 *   The metadata datastream to edit.
 * @param string $form_name
 *   The name of the xml form.
 *
 * @return array
 *   The Drupal edit metadata form.
 */
function esdora_islandora_edit_form(array &$form_state, $pid, $dsid, $form_name) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  module_load_include('inc', 'fedora_repository', 'ConnectionHelper');
  $soapHelper = new ConnectionHelper();
  $client = $soapHelper->getSoapClient(variable_get('fedora_soap_url', 'http://localhost:8080/fedora/services/access?wsdl'));
  $form_state = array();
  $form_state['values']['forms'] = $form_name;
  $editObjectForm = new EditObjectMetadataForm();
  $form = $editObjectForm->createPageTwo($pid, $client, $form_state);
  return $form;
}

/**
 * Here we submit the form using xml_form_builder.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_islandora_edit_form_submit($form, &$form_state) {
  module_load_include('inc', 'islandora_content_model_forms', 'EditObjectMetadataForm');
  $xml_form = new EditObjectMetadataForm($form_state);
  $xml_form->submit($form, $form_state);
}

/**
 * Submit handle for adding derivative relationships.
 *
 * @todo Function is too long, refactor it.
 *
 * @note The form def is in esdora.inc (yuck)
 *       adds isderivedfrom to the Rels ext, can take a comma seperated string as a list of pids
 *       currently no way to remove a pid from the list with this form (TODO:)
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_islandora_derivative_form_submit(array &$form, array &$form_state) {
  module_load_include('inc', 'fedora_repository', 'api/fedora_item');
  module_load_include('inc', 'fedora_repository', 'api/fedora_utils');
  $pid = $form_state['values']['pid'];
  $item = new Fedora_Item($pid);
  $pids = array_map('trim', explode(',', $form_state['values']['related_pid']));
  $valid_pids = array_filter($pids, 'valid_pid');
  foreach ($valid_pids as $key => $valid_pid) {
    $o = new Fedora_Item($valid_pid);
    if (!$o->exists()) {
      unset($valid_pids[$key]);
    }
  }
  $invalid_pids = array_diff($pids, $valid_pids);
  if (!empty($invalid_pids)) {
    drupal_set_message(t('@num of the given pids were not valid (@pids). No derived from relationship was not added for them.', array('@num' => count($invalid_pids), '@pids' => implode(', ', $invalid_pids))), 'error');
  }
  $relationships = array_map(function($v) { return $v['object']; }, $item->get_relationships('isDerivedFrom'));
  $unique_valid_pids = array_filter($valid_pids, function($pid) use($relationships) { return array_search($pid, $relationships) === FALSE; });
  $already_related = array_diff($valid_pids, $unique_valid_pids);
  if (!empty($already_related)) {
    drupal_set_message(t('@num of the given pids already have this relationship defined (@pids).', array('@num' => count($already_related), '@pids' => implode(', ', $already_related))), 'error');
  }
  foreach ($unique_valid_pids as $derived_from_pid) {
    $item->add_relationship('isDerivedFrom', $derived_from_pid);
  }
  $txt = $form_state['values']['txt'];
  //this will overwrite the txt stream if it exists or create it if it doesn't
  if (!empty($txt)) {
    $ds_list = $item->get_datastreams_list_as_array();
    if (empty($ds_list['processing.txt'])) {
      $item->add_datastream_from_string($txt, 'processing.txt', 'processing text', $datastream_mimetype = 'text/plain', 'M');
      //mark it as metadata:
      $esdora = new Esdora($pid);
      $esdora->add_relationship_internal('isMetaDataFor', $pid, 'processing.txt', "http://esdora.ornl.gov/ontologies/relationships#");
    } else {
      //TODO: add this to an api call called modify_datastream_by_txt or something similar
      $dir = file_directory_temp();
      $tmpfilename = tempnam($dir, 'fedoratmp');
      $tmpfile = fopen($tmpfilename, 'w');
      fwrite($tmpfile, $txt, strlen($txt));
      fclose($tmpfile);
      file_copy($tmpfilename, file_directory_path());
      //$datastream_url = drupal_urlencode($tmpfilename);
      $url = file_create_url($tmpfilename);
      $item->modify_datastream_by_reference($url, 'processing.txt', 'processing text', 'text/plain', $force = FALSE, $logMessage = 'Modified by Islandora API');
      unlink($tmpfilename);
    }
  }
  drupal_goto('fedora/repository/' . $pid); //would like to use a form redirect but since we are using a combination of ajax and drupal formapi does not see to redirect doesn't seem to work
}

/**
 *
 */
function esdora_islandora_get_tabs_compound() {
  $pid = $_POST['pid'];
  $case = $_POST['tab'];
  $pid = str_replace('"/', "", $pid);
  $pid = trim($pid);
  $case = trim($case);
  module_load_include('inc', 'esdora_islandora', 'plugins/esdora');
  $esdora = new Esdora($pid);
  esdora_islandora_get_tabs($esdora, $case);
}

/**
 *
 */
function esdora_islandora_get_tabs_atomic() {
  $pid = $_POST['pid'];
  $case = $_POST['tab'];
  $pid = str_replace('"/', "", $pid);
  $pid = trim($pid);
  $case = trim($case);
  module_load_include('inc', 'esdora_islandora', 'plugins/esdora_atomic');
  $esdora = new Esdora_Atomic($pid);

  esdora_islandora_get_tabs($esdora, $case);
}

/**
 *
 */
function esdora_islandora_get_tabs($esdora_obj, $case) {
  $content = '';
  if ($case == "Items")
    $content.= $esdora_obj->getItems();
  else if ($case == "Metadata") {
    $content.= $esdora_obj->getMetadata();
  } else if ($case == "Description") {
    $content.= $esdora_obj->getDescription();
  } else if ($case == "History")
    $content.= $esdora_obj->getHistory();
  else if ($case == "Viewers") {
    $content.= $esdora_obj->getViewers();
  }
  else
    $content.= 'oops';
  echo drupal_json($content);
}

/**
 * Alter the add datastream form so we can mark the file as metadata if required, change the default submit handlers.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_islandora_form_add_stream_form_alter(array &$form,  array &$form_state) {
  $form['is_metadata'] = array(
    '#type' => 'checkbox',
    '#weight' => '-1',
    '#title' => t('Is this Metadata?'),
    '#description' => t('If this file is not actual data but describes the data please mark it as metadata by checking the checkbox')
  );
  $form['stream_id'] = array( // This overrides the dropdown as it is usually generated from a list of available ids but we want free form text.
    '#type' => 'textfield',
    '#title' => 'datastream id',
    '#weight' => '0',
    '#description' => 'machine readable datastream id',
  );
  $form['is_viewer'] = array(
    '#type' => 'fieldset',
    '#weight' => '-2',
    '#title' => t('Is this a reference to a viewer.'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#description' => t('Enter a URL to an external viewer.  Marking this as Metadata or uploading a file will be ingnored as a Viewer cannot be Metadata and there will not be a file associated with this datastream.'),
    'viewer_url' => array(
      '#type' => 'textfield',
      '#title' => t('The URL for the viewer'),
      '#description' => t('A URL for a viewer for this object'),
    )
  );
  $form['#submit'][0] = 'esdora_rels_int_handler'; // Replace the default submit handler
  $form['#validate'][0] = 'esdora_rels_int_handler_validate'; // Replace the default validation handler
}

/**
 * Alter the ingest form to add a file upload for zip ingest. Only applies to specific forms and content models.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_islandora_formfedora_repository_ingest_form_alter(array &$form, array &$form_state) {
  $alter_models = array('esdora:defaultDataCModel');
  $values = $form_state['values'];
  $model = isset($values['models']) ? strstr($values['models'], '/', TRUE) : NULL;
  $alter_model = array_search($model, $alter_models) !== FALSE; // Only alter forms for content models defined in $alter_models.
  $alter_form = $values['forms'] == 'import from zip'; // At the moment forms with the name 'import from zip' get altered.
  if ($alter_model && $alter_form) {
    $form['#attributes'] = array('enctype' => "multipart/form-data");
    $form['file_upload'] = array('#type' => 'file', '#title' => 'upload a zip file');
    $form['submit'] = array('#type' => 'submit', '#value' => t('Submit'));
    $form['#submit'][] = 'esdora_file_upload_handler'; // Append new submit handler.
  }
}

/**
 * Submission handler for ingest forms that upload a file.
 *
 * @todo: investigate handleZipIngestForm
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_file_upload_handler(array &$form, array &$form_state) {
  if ($file = file_save_upload('file_upload', null, file_directory_path())) {
    module_load_include('inc', 'esdora_islandora', 'plugins/EsdoraIngest');
    $esdora_ingest = new EsdoraIngest();
    $esdora_ingest->handleZipIngestForm($form_state['values'], $file);
  }
}

/**
 * Validates the add datastream form, if a viewer_url is present then it ignores uploaded files.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_rels_int_handler_validate(array &$form, array &$form_state) {
  if (empty($form_state['values']['viewer_url'])) { // if the viewer_url is populated we are adding a redirect stream only
    $files = $_FILES["files"]["name"];
    $file_name = $files['add-stream-file-location'];
    if (empty($file_name) && !($form_state['values']['submit'] == 'OK')) { // Islandora is doing something with the form instead of a redirect. it changes the submit button ot OK and when you click it redirects
      form_set_error('', t('No File uploaded. Please Choose a file.'));
    }
    add_stream_form_validate($form, $form_state);
  }
}

/**
 * Submit handler for the add datastream form.
 *
 * @param array $form
 *   The Drupal form.
 * @param array $form_state
 *   The Drupal form state.
 */
function esdora_rels_int_handler(array &$form, array &$form_state) {
  module_load_include('inc', 'esdora_islandora', 'plugins/esdora');
  $esdora = new Esdora($form_state['values']['pid']);
  if (!empty($form_state['values']['viewer_url'])) {
    $viewer_url = $form_state['values']['viewer_url'];
    $filtered_url = $viewer_url;
    if (!isset($filtered_url)) {
      drupal_set_message(t('You must enter a valid URL in the URL for Viewer textbox'));
      //TODO: we should check to see if they attached a file and delete it if they did maybe or at least verify that we are not leaving files hanging around shouldn't happen very often but could
      return ' ';
    }
    $pid = $form_state['values']['pid'];
    $dsid = $form_state['values']['stream_id'];
    $dsLabel = $form_state['values']['stream_label'];
    $item = new Fedora_Item($pid);
    $item->add_datastream_from_url($filtered_url, $dsid, $dsLabel, NULL, 'R');
    $esdora->add_relationship_internal('isViewerFor', $pid, $dsid, "http://esdora.ornl.gov/ontologies/relationships#");
    return ' '; //we don't want to do add an actual file as we have already added the datatstream here and it is externally managed by Fedora
  }
  // Call the orginal handler where this is where this gets brittle if the orginal form handler changes this may break (the add stream form is core so shouldn't change unless it is major refactor like going from 6 to 7 which would require changes
  add_stream_form_submit($form, $form_state);
  if ($form_state['values']['is_metadata'] === 1) {
    $esdora->add_relationship_internal('isMetaDataFor', $form_state['values']['pid'], $form_state['values']['stream_id'], "http://esdora.ornl.gov/ontologies/relationships#");
  }
}

/**
 * Menu callback for fedora/respository. This becomes the main entry of the ESDORA repository
 */
function esdora_repository_page($pid = NULL, $dsid = NULL, $collection = NULL, $page_number = NULL, $limit = NULL) {
  module_load_include('inc', 'esdora_islandora', 'EsdoraDisplay');
  try {
    return esdora_menu_alter_fedora_repository($pid, $dsid, $collection, $page_number, $limit);
  }
  catch (Exception $e) {
    drupal_set_message(t('Error trying to display @pid: @msg', array('@pid' => $pid, '@msg' => $e->getMessage())));
    drupal_not_found();
  }
}


/**
 * Menu callback for displaying the purge datastreams form.
 *
 * @note This is probably functionally wrong as the user can select cancel in the purge stream form. In such a case this function will remove
 *       the rels-int statements even in the datastream is removed.
 * @todo Implement this as a hook form alter that removes the rels-int statements in a submit handler of the purge stream form.
 *
 * @param string $pid
 *   The pid of the object.
 * @param string $dsid
 *   The dsid of the datastream.
 * @param string $label
 *   The label of the datastream.
 *
 * @return string
 *   The purge stream form.
 */
function esdora_islandora_prepare_stream_for_removal($pid = NULL, $dsid = NULL, $name = NULL) {
  module_load_include('inc', 'esdora_islandora', 'plugins/esdora');
  $value = Esdora::remove_relationship_internal($pid, $dsid);
  return fedora_repository_purge_stream($pid, $dsid, $name);
}